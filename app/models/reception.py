from app import db
from datetime import datetime

class Reception(db.Model):
    __tablename__ = 'reception'
    
    id = db.Column(db.Integer, primary_key=True)
    date_reception = db.Column(db.DateTime, default=datetime.utcnow)
    achat_id = db.Column(db.Integer, db.ForeignKey('achat.id'), nullable=False)
    etat = db.Column(db.String(20), default=None)

    # Relation pour acc√©der aux lignes de r√©ception associ√©es
    lignes_reception = db.relationship("LigneReception", back_populates="reception", cascade="all, delete-orphan")

    def __init__(self, achat_id, **kwargs):
        self.achat_id = achat_id
        self.date_reception = kwargs.get("date_reception", datetime.utcnow())
        self.etat = kwargs.get("etat", None)

    def __repr__(self):
        return f"<Reception Achat {self.achat_id} - ID {self.id} - Etat {self.etat}>"

    def ajouter_reception(self):
        db.session.add(self)
        db.session.commit()
        print(f"‚úÖ R√©ception pour Achat {self.achat_id} ajout√©e avec succ√®s.")

    def modifier_reception(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)
        db.session.commit()
        print(f"‚úÖ R√©ception {self.id} mise √† jour avec succ√®s.")

    def supprimer_reception(self):
        db.session.delete(self)
        db.session.commit()
        print(f"üóëÔ∏è R√©ception {self.id} supprim√©e avec succ√®s.")

    def confirmer_reception(self):
        """
        Confirme la r√©ception en mettant √† jour le stock global de chaque produit ainsi que
        la quantit√© re√ßue dans l'association ProduitProjet li√©e au projet de l'achat.
        D√©termine l'√©tat de la r√©ception en fonction des quantit√©s re√ßues par rapport aux quantit√©s command√©es.
        """
        # On r√©cup√®re le projet li√© √† cet achat via la relation Achat (suppos√©e d√©finie dans le mod√®le Achat)
        achat_instance = self.achat  # On suppose que la relation backref 'achat' existe dans le mod√®le Achat
        if not achat_instance:
            print("‚ö†Ô∏è Achat associ√© introuvable.")
            return

        projet_id = achat_instance.projet_id

        # Initialiser un indicateur pour savoir si la r√©ception est compl√®te
        reception_complete = True

        # Pour chaque ligne de r√©ception, mettre √† jour le stock du produit et l'association dans ProduitProjet
        for ligne in self.lignes_reception:
            produit = ligne.produit  # On suppose que la relation "produit" est bien d√©finie dans LigneReception
            if produit:
                # Mettre √† jour le stock global du produit
                produit.quantite += ligne.quantite_recue
                # Mettre √† jour l'association ProduitProjet si le projet est d√©fini
                if projet_id:
                    from app.models.associations import ProduitProjet
                    association = ProduitProjet.query.filter_by(produit_id=produit.id, projet_id=projet_id).first()
                    if association:
                        # Nous supposons ici que l'association doit enregistrer la quantit√© re√ßue.
                        # Il faut ajouter un nouvel attribut 'quantite_recue' dans la classe ProduitProjet pour cela.
                        if hasattr(association, 'quantite_recue'):
                            association.quantite_recue += ligne.quantite_recue
                        else:
                            # Si l'attribut n'existe pas, on peut l'initialiser (mais id√©alement, il faudrait le d√©finir dans le mod√®le)
                            association.quantite_recue = ligne.quantite_recue
                    else:
                        print(f"‚ö†Ô∏è Aucune association trouv√©e pour produit_id {produit.id} et projet_id {projet_id}.")
                # Optionnel : si la quantit√© re√ßue est inf√©rieure √† la quantit√© command√©e (que l'on peut r√©cup√©rer depuis LigneAchat ou Achat),
                # on consid√®re la r√©ception comme partielle.
                # Par exemple, si ligne.quantite_recue < quantit√© attendue, on passe reception_complete √† False.
                # Ici, on suppose que la logique de comparaison est d√©finie ailleurs.
            else:
                print(f"‚ö†Ô∏è Produit avec id {ligne.produit_id} non trouv√©.")
                reception_complete = False

        # D√©terminer l'√©tat de la r√©ception
        self.etat = "complete" if reception_complete else "partielle"
        db.session.commit()
        print(f"‚úÖ R√©ception {self.id} confirm√©e : stocks et associations mis √† jour. Etat: {self.etat}")

